// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for users
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  files    File[]

  @@map("users")
}

// Model for OAuth accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model File {
  id              String   @id @default(cuid())
  
  // File metadata
  originalName    String
  fileName        String   // stored filename (with extension)
  fileSize        Int      // in bytes
  mimeType        String
 
  // Sharing settings
  shareId         String   @unique // public share identifier
  expiresAt       DateTime
  isExpired       Boolean  @default(false)
  maxDownloads    Int?     // download limit maybe future use
  
  // Metadata
  uploadedAt      DateTime @default(now())
  lastAccessedAt  DateTime?
  
  // Relations
  uploadedById    String   // required user ID
  uploadedBy      User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  
  @@map("files")
}
